generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String       @id @default(cuid())
  role         String?
  username     String       @unique
  email        String?      @unique
  passwordHash String
  employeeId   Int          @unique
  image        String?
  Accounts     Account[]
  Sessions     Session[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Permissions  Permission[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// LOCATION MODELS
model Country {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String
  Provinces Province[]
  Addresses Address[]

  @@map("countries")
}

model Province {
  id        String    @id @default(cuid())
  code      String    @unique
  nameAr    String
  name      String
  countryId String?
  Country   Country?  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Cities    City[]
  Addresses Address[]

  @@map("provinces")
}

model City {
  id         String    @id @default(cuid())
  zipCode    String    @unique
  nameAr     String
  name       String
  provinceId String
  Province   Province  @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  Addresses  Address[]

  @@map("cities")
}

model Address {
  id         String  @id @default(cuid())
  street     String?
  cityId     String
  provinceId String
  countryId  String

  City     City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  Province Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  Country  Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Client   Client?

  @@map("addresses")
}

// RADIATOR, INVENTORY, COMPONENTS
model Inventory {
  id       String  @id @default(cuid())
  level    Int     @default(0) // Current inventory level
  alertAt  Int     @default(10) // Minimum level to trigger an alert
  maxLevel Int     @default(500) // Maximum level for inventory
  location String?

  Radiators Radiator[]

  @@map("inventories")
}

model InvoiceItem {
  id         String    @id @default(cuid())
  number     Int
  label      String?
  price      Int?
  amount     Int?
  quantity   Int?
  radiatorId String?
  Radiator   Radiator? @relation(fields: [radiatorId], references: [id])
  Invoice    Invoice?  @relation(fields: [invoiceId], references: [id])
  invoiceId  String?

  @@map("InvoiceItem")
}

model Invoice {
  id                  String    @id @default(cuid())
  reference           String    @unique
  date                DateTime? @default(now())
  name                String?
  address             String?
  tradeRegisterNumber String?
  registrationArticle String?
  taxIdNumber         String?
  type                String?
  status              String?
  paymentMode         String?
  purchaseOrder       String?
  deliverySlip        String?
  discountRate        Float?    @default(0)
  refundRate          Float?    @default(0)
  stampTaxRate        Float?    @default(0)
  offerValidity       String?
  guaranteeTime       String?
  deliveryTime        String?
  note                String?
  total               Float?
  subtotal            Float?
  tax                 Float?

  items InvoiceItem[]

  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId String?

  clientId String?
  Client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  histories InvoiceHistory[]

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("invoices")
}

model InvoiceHistory {
  id        String  @id @default(cuid())
  snapshot  Json
  changedBy String?
  reason    String?

  invoiceId String?
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  changedAt DateTime @default(now())

  @@map("invoice_histories")
}

model Price {
  id            String   @id @default(cuid())
  unit          Float    @default(0)
  unitTTC       Float    @default(0) // Including tax
  bulk          Float    @default(0)
  bulkTTC       Float    @default(0) // Including tax
  bulkThreshold Int      @default(100) // Minimum quantity for bulk pricing
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Radiators Radiator[]

  @@map("prices")
}

model Radiator {
  id                   String        @id @default(cuid())
  partNumber           String?       @unique // is unique manufacturing number 
  category             String?
  dirId                String?
  cooling              String?
  barcode              String?       @unique
  label                String?
  hash                 String?       @unique // Unique hash for the radiator
  status               String? // e.g., "active", "inactive", "draft" , "ar"
  type                 String? // e.g., "collector", "core", "tube"
  production           String? // e.g., "2023-10-01"
  fabrication          String?
  fins                 String?
  pitch                Int?
  tubeType             String?
  rows                 Int?
  tubeDiameter         Int?
  betweenCollectors    Int?
  width                Int?
  position             String?
  tightening           String?
  perforation          String?
  isTinned             Boolean?      @default(false)
  isPainted            Boolean?      @default(true)
  upperCollectorLength Int?
  lowerCollectorLength Int?
  upperCollectorWidth  Int?
  lowerCollectorWidth  Int?
  isActive             Boolean?      @default(false)
  inventoryId          String?
  priceId              String?
  directoryId          String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  Inventory            Inventory?    @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  Price                Price?        @relation(fields: [priceId], references: [id], onDelete: SetNull)
  Directory            Directory?    @relation(fields: [directoryId], references: [id], onDelete: SetNull)
  CarType              Type?
  OrderItems           OrderItem[]
  Components           Component[]
  invoiceId            String?
  InventoryItem        InvoiceItem[]

  @@map("radiators")
}

model Component {
  id         String  @id @default(cuid())
  label      String
  type       String?
  radiatorId String?

  Radiator       Radiator?       @relation(fields: [radiatorId], references: [id], onDelete: Cascade)
  MaterialUsages MaterialUsage[]

  @@map("components")
}

// MATERIAL SYSTEM

model Material {
  id               String          @id @default(cuid())
  reference        String?         @unique
  name             String
  description      String?
  unit             String? // e.g., "kg", "g", "l", "m²", "cm²"
  baseUnit         String? // e.g., "g", "ml", "m²"
  conversionFactor Float? // e.g., 1000 if unit is "kg" and baseUnit is "g"
  unitCost         Float? // cost per base unit
  Usages           MaterialUsage[]

  @@map("materials")
}

model MaterialUsage {
  id          String @id @default(cuid())
  componentId String
  materialId  String
  quantity    Float?

  Component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  Material  Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([componentId, materialId])
  @@map("material_usages")
}

// CAR SYSTEM

model Brand {
  id       String   @id @default(cuid())
  name     String   @unique
  Families Family[]

  @@map("car_brands")
}

model Family {
  id      String  @id @default(cuid())
  name    String
  brandId String?

  Brand  Brand?  @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Models Model[]

  @@map("car_families")
}

model Model {
  id       String  @id @default(cuid())
  name     String
  familyId String?
  Family   Family? @relation(fields: [familyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Types    Type[]

  @@map("car_models")
}

model Type {
  id   String  @id @default(cuid())
  name String
  year String?
  fuel String?

  modelId String?

  Model Model? @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Radiator   Radiator?   @relation(fields: [radiatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  radiatorId String?     @unique
  OrderItem  OrderItem[]

  @@map("car_type")
}

// CLIENTS & ORDERS

model Client {
  id                  String  @id @default(cuid())
  name                String
  phone               String? // TODO: add @unique when the database is ready
  label               String?
  email               String? @unique
  isCompany           Boolean @default(false)
  website             String?
  fiscalNumber        String?
  tradeRegisterNumber String?
  registrationArticle String?
  taxIdNumber         String?
  statisticalIdNumber String?
  approvalNumber      String?

  addressId String?  @unique
  Address   Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)

  Orders    Order[]
  Payments  Payment[] // Added to directly link payments to clients for easier querying
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@map("clients")
}

model Attachment {
  id          String     @id @default(cuid())
  url         String // URL of the uploaded file
  type        String // MIME type like 'image/jpeg', 'application/pdf', etc.
  name        String // Original file name
  uniqueName  String     @unique // Unique file serial
  Order       Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?
  createdAt   DateTime   @default(now())
  OrderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String? // Made optional to fix the issue @map("orderId")

  @@map("attachments") // Added map directive for consistency
}

model Order {
  id             String       @id @default(cuid())
  deadline       DateTime     @default(now())
  status         String?
  progress       Int          @default(0)
  OrdersItems    OrderItem[]
  totalItems     Int          @default(0)
  totalAmount    Float? // Added to store the total order value
  deliveredItems Int          @default(0)
  Payment        Payment      @relation(name: "OrderToPayment", fields: [paymentId], references: [id], onDelete: Restrict)
  paymentId      String       @unique
  clientId       String
  Client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Attachments    Attachment[]

  createdAt DateTime  @default(now()) // Added for consistency
  updatedAt DateTime  @updatedAt // Added for consistency
  Invoice   Invoice[]

  @@map("order_batches") // Added map directive for consistency
}

model OrderItem {
  id                   String       @id @default(cuid())
  note                 Json?
  description          Json?
  modification         Json?
  serialNumber         String?
  packaging            String?
  type                 String?
  category             String?
  cooling              String?
  label                String?
  production           String?
  fabrication          String?
  isModified           Boolean?
  status               String? // e.g., "pending", "in_progress", "delivered"
  quantity             Int?
  delivered            Int?
  validatedAt          DateTime?
  canceledAt           DateTime?
  fins                 String?
  pitch                Int?
  tubeType             String?
  rows                 Int?
  tubeDiameter         Int?
  betweenCollectors    Int?
  width                Int?
  position             String?
  tightening           String?
  perforation          String?
  isTinned             Boolean?     @default(false)
  isPainted            Boolean?     @default(true)
  upperCollectorLength Int?
  lowerCollectorLength Int?
  upperCollectorWidth  Int?
  lowerCollectorWidth  Int?
  createdAt            DateTime     @default(now()) // Made consistent (not optional)
  updatedAt            DateTime     @updatedAt // Made consistent (not optional)
  Order                Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId              String?
  Attachments          Attachment[]
  Radiator             Radiator?    @relation(fields: [radiatorId], references: [id])
  radiatorId           String?
  CarType              Type?        @relation(fields: [carTypeId], references: [id])
  carTypeId            String?      @map("typeId")

  @@map("orders")
}

model Payment {
  id                 String               @id @default(cuid())
  amount             Float
  deposit            Float
  remaining          Float
  status             String? // Tracks payment status (e.g., "pending", "partial", "completed")
  mode               String?
  bank               String?
  iban               String?
  depositor          String?
  paymentDate        DateTime? // Precise payment timing for filtering by year
  Order              Order?               @relation(name: "OrderToPayment")
  createdAt          DateTime             @default(now()) // Added for consistency
  updatedAt          DateTime             @updatedAt // Added for consistency
  Client             Client?              @relation(fields: [clientId], references: [id])
  clientId           String?
  PaymentInstallment PaymentInstallment[]

  @@index([clientId])
  @@index([paymentDate])
  @@index([status])
  @@map("payments")
}

model PaymentInstallment {
  id          String   @id @default(cuid())
  paymentId   String
  Payment     Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  amount      Float
  paymentDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("payment_installments")
}

// FILE SYSTEM

model Directory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  Parent   Directory?  @relation("FolderParent", fields: [parentId], references: [id], onDelete: SetNull)
  Children Directory[] @relation("FolderParent")

  Files       File[]
  Permissions Permission[]

  Radiators Radiator[]
}

model File {
  id          String  @id @default(cuid())
  name        String
  mimeType    String
  url         String
  size        Int
  description String?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directoryId String
  Directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)

  Tags        Tag[]
  Versions    FileVersion[]
  Permissions Permission[]
}

model FileVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  createdAt DateTime @default(now())

  fileId String
  File   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Files File[]
}

model Permission {
  id     String  @id @default(cuid())
  access String?
  userId String
  fileId String?
  dirId  String?

  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  File      File?      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  Directory Directory? @relation(fields: [dirId], references: [id], onDelete: Cascade)
}
