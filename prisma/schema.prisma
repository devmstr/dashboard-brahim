generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id           String    @id @default(cuid())
  role         String?
  username     String    @unique
  email        String?   @unique
  passwordHash String
  employeeId   Int       @unique
  image        String?
  accounts     Account[]
  sessions     Session[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Country {
  id      String @id @default(cuid())
  code    String @unique
  name    String
  name_ar String
}

model Wilaya {
  id      String  @id @default(cuid())
  code    String  @unique
  name_ar String
  name    String
  Dairas  Daira[]
}

model Daira {
  id       String @id @default(cuid())
  code     String
  name_ar  String
  name     String
  Wilaya   Wilaya @relation(fields: [wilayaId], references: [id])
  wilayaId String @unique
}

model Radiator {
  id          String     @id @default(cuid())
  dirId       String
  barcode     String?
  description String
  hash        String     @unique
  brand       String?
  model       String?
  isValidated Boolean?   @default(false)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  // relations 
  core        Core?      @relation(fields: [coreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coreId      String?    @unique
  collector   Collector? @relation(fields: [collectorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collectorId String?    @unique
  Order       Order?     @relation(fields: [orderId], references: [id])
  orderId     String?

  @@index([barcode])
  @@index([hash])
  @@map("RadiatorStock")
}

model Core {
  id        String     @id @default(cuid())
  height    Int
  width     Int
  tube      String?
  fins      String
  finsPitch Int?
  rows      Int
  Radiator  Radiator[]
  Order     Order?     @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Collector {
  id          String     @id @default(cuid())
  height      Int
  width       Int
  lowerHeight Int?
  lowerWidth  Int?
  position    String?
  tightening  String?
  Radiator    Radiator[]
}

model Exhaust {
  id          String    @id @default(cuid())
  barcode     String?
  description String
  type        String
  painting    String
  isValidated Boolean?  @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  hash        String    @unique
  car         Car[]
}

model Brand {
  id           String    @id @default(cuid())
  name         String    @unique
  abbreviation String
  Cars         Car[]
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
}

model Car {
  id        String    @id @default(cuid())
  model     String?
  type      String?
  subType   String?
  fuel      String?
  engine    String?
  Exhaust   Exhaust?  @relation(fields: [exhaustId], references: [id])
  exhaustId String?
  Brand     Brand?    @relation(fields: [brandId], references: [id])
  brandId   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Client {
  id        String    @id @default(cuid())
  name      String
  phone     String
  email     String?
  isCompany Boolean   @default(false)
  website   String?
  rc        String?
  mf        String?
  ai        String?
  nif       String?
  nis       String?
  na        String?
  address   String?
  country   String?
  province  String?
  city      String?
  zip       String?
  Orders    Order[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id         String     @id @default(cuid())
  deadline   DateTime   @default(now())
  totalPrice Int?
  items      Int?
  state      String?
  progress   Int        @default(0)
  // new relations
  Radiators  Radiator[]
  Cores      Core[]
  Clients    Client[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Payment {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
