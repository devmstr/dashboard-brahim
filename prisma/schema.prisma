generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ComponentType {
  CORE
  COLLECTOR

  @@map("component_type")
}

enum CollectorType {
  TOP
  BOTTOM

  @@map("collector_position")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id           String       @id @default(cuid())
  role         String?
  username     String       @unique
  email        String?      @unique
  passwordHash String
  employeeId   Int          @unique
  image        String?
  accounts     Account[]
  sessions     Session[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Permission   Permission[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// ENUMS
enum AccessLevel {
  VIEW
  EDIT
  MANAGE

  @@map("access_levels")
}

// LOCATION MODELS
model Country {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String
  provinces Province[]
  addresses Address[]

  @@map("countries")
}

model Province {
  id        String    @id @default(cuid())
  code      String    @unique
  nameAr    String
  name      String
  countryId String?
  country   Country?  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities    City[]
  addresses Address[]

  @@map("provinces")
}

model City {
  id         String    @id @default(cuid())
  zipCode    String    @unique
  nameAr     String
  name       String
  provinceId String
  province   Province  @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  addresses  Address[]

  @@map("cities")
}

model Address {
  id         String  @id @default(cuid())
  street     String?
  cityId     String
  provinceId String
  countryId  String

  city     City     @relation(fields: [cityId], references: [id])
  province Province @relation(fields: [provinceId], references: [id])
  country  Country  @relation(fields: [countryId], references: [id])
  client   Client?

  @@map("addresses")
}

// RADIATOR, INVENTORY, COMPONENTS

model Inventory {
  id        String     @id @default(cuid())
  level     Int        @default(0)
  alertAt   Int        @default(0)
  radiators Radiator[]

  @@map("inventories")
}

model Price {
  id        String     @id @default(cuid())
  unit      Float      @default(0)
  bulk      Float      @default(0)
  radiators Radiator[]

  @@map("prices")
}

model Radiator {
  id        String   @id @default(cuid())
  reference String?  @unique
  category  String?
  dir       String?
  cooling   String?
  barcode   String?  @unique
  label     String?  @unique
  isActive  Boolean? @default(false)

  inventoryId String?
  priceId     String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  inventory   Inventory?          @relation(fields: [inventoryId], references: [id])
  price       Price?              @relation(fields: [priceId], references: [id])
  directories Directory[]
  orders      Order[]
  models      CarModel[]
  components  RadiatorComponent[]

  @@map("radiators")
}

model RadiatorComponent {
  id         String        @id @default(cuid())
  name       String
  type       ComponentType
  radiatorId String

  radiator  Radiator                 @relation(fields: [radiatorId], references: [id])
  materials ComponentMaterialUsage[]

  core      Core?
  collector Collector?

  @@map("radiator_components")
}

model Core {
  id     String @id @default(cuid())
  width  Int
  height Int
  rows   Int
  fins   String
  pitch  Int
  tube   String

  componentId String            @unique
  component   RadiatorComponent @relation(fields: [componentId], references: [id])

  @@map("cores")
}

model Collector {
  id                  String        @id @default(cuid())
  type                CollectorType
  width               Int
  height              Int
  componentId         String        @unique
  collectorTemplateId String

  template  CollectorTemplate @relation(fields: [collectorTemplateId], references: [id])
  component RadiatorComponent @relation(fields: [componentId], references: [id])

  @@map("collectors")
}

model CollectorTemplate {
  id           String   @id @default(cuid())
  thickness    Int?
  position     String
  tightening   String
  isPerforated Boolean?
  isTinned     Boolean?
  material     String?

  collectors Collector[]

  @@map("collector_templates")
}

// MATERIAL SYSTEM

model RawMaterial {
  id     String                   @id @default(cuid())
  name   String                   @unique
  usages ComponentMaterialUsage[]
}

model ComponentMaterialUsage {
  id          String @id @default(cuid())
  componentId String
  materialId  String
  weight      Float

  component RadiatorComponent @relation(fields: [componentId], references: [id])
  material  RawMaterial       @relation(fields: [materialId], references: [id])

  @@unique([componentId, materialId])
}

// CAR SYSTEM

model Brand {
  id       String      @id @default(cuid())
  name     String
  families CarFamily[]

  @@map("car_brands")
}

model CarFamily {
  id      String @id @default(cuid())
  name    String
  brandId String

  brand  Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  models CarModel[]

  @@map("car_families")
}

model CarModel {
  id         String  @id @default(cuid())
  name       String
  production String?
  familyId   String
  radiatorId String?

  family   CarFamily @relation(fields: [familyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  types    CarType[]
  radiator Radiator? @relation(fields: [radiatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("car_models")
}

model CarType {
  id      String @id @default(cuid())
  name    String
  modelId String

  model CarModel @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("car_type")
}

// CLIENTS & ORDERS

model Client {
  id                  String  @id @default(cuid())
  name                String
  phone               String  @unique
  label               String?
  email               String? @unique
  isCompany           Boolean @default(false)
  website             String?
  tradeRegisterNumber String?
  fiscalNumber        String?
  registrationArticle String?
  taxIdNumber         String?
  statisticalIdNumber String?
  approvalNumber      String?

  addressId String?  @unique
  address   Address? @relation(fields: [addressId], references: [id])

  orders    Order[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("clients")
}

model Attachment {
  id        Int      @id @default(autoincrement())
  url       String // URL of the uploaded file
  type      String // MIME type like 'image/jpeg', 'application/pdf', etc.
  name      String // Original file name
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
}

model Order {
  id            String    @id @default(cuid())
  deadline      DateTime  @default(now())
  notes         Json?
  description   Json?
  modifications Json?
  state         String?
  progress      Int       @default(0)
  packaging     String?
  fabrication   String?
  isModified    String?
  validatedAt   DateTime?
  canceledAt    DateTime?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  clientId    String
  client      Client       @relation(fields: [clientId], references: [id])
  radiators   Radiator[]
  attachments Attachment[]

  @@map("orders")
}

model Payment {
  id        String @id @default(cuid())
  amount    Float
  deposit   Float
  remaining Float

  @@map("payments")
}

// FILE SYSTEM

model Directory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  radiatorId String?
  radiator   Radiator? @relation(fields: [radiatorId], references: [id])

  parentId String?
  parent   Directory?  @relation("FolderParent", fields: [parentId], references: [id])
  children Directory[] @relation("FolderParent")

  files       File[]
  permissions Permission[]
}

model File {
  id          String  @id @default(cuid())
  name        String
  mimeType    String
  url         String
  size        Int
  description String?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directoryId String
  directory   Directory @relation(fields: [directoryId], references: [id])

  tags        Tag[]
  versions    FileVersion[]
  permissions Permission[]
}

model FileVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  createdAt DateTime @default(now())

  fileId String
  file   File   @relation(fields: [fileId], references: [id])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files File[]
}

model Permission {
  id     String      @id @default(cuid())
  access AccessLevel
  userId String
  fileId String?
  dirId  String?

  user      User       @relation(fields: [userId], references: [id])
  file      File?      @relation(fields: [fileId], references: [id])
  directory Directory? @relation(fields: [dirId], references: [id])
}
