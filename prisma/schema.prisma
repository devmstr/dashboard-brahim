generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CollectorType {
  TOP
  BOTTOM

  @@map("collector_position")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String       @id @default(cuid())
  role         String?
  username     String       @unique
  email        String?      @unique
  passwordHash String
  employeeId   Int          @unique
  image        String?
  Accounts     Account[]
  Sessions     Session[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Permissions  Permission[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// ENUMS
enum AccessLevel {
  VIEW
  EDIT
  MANAGE
}

// LOCATION MODELS
model Country {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String
  Provinces Province[]
  Addresses Address[]

  @@map("countries")
}

model Province {
  id        String    @id @default(cuid())
  code      String    @unique
  nameAr    String
  name      String
  countryId String?
  Country   Country?  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Cities    City[]
  Addresses Address[]

  @@map("provinces")
}

model City {
  id         String    @id @default(cuid())
  zipCode    String    @unique
  nameAr     String
  name       String
  provinceId String
  Province   Province  @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  Addresses  Address[]

  @@map("cities")
}

model Address {
  id         String  @id @default(cuid())
  street     String?
  cityId     String
  provinceId String
  countryId  String

  City     City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  Province Province @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  Country  Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  Client   Client?

  @@map("addresses")
}

// RADIATOR, INVENTORY, COMPONENTS
model Inventory {
  id        String     @id @default(cuid())
  level     Int        @default(0)
  alertAt   Int        @default(0)
  maxLevel  Int        @default(0)
  Radiators Radiator[]

  @@map("inventories")
}

enum InvoiceType {
  PROFORMA
  FINAL
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

model Invoice {
  id            String         @id @default(cuid())
  number        String         @unique
  date          DateTime       @default(now())
  clientName    String?
  clientAddress String?
  type          InvoiceType? //e.g., "proforma", "final"
  status        InvoiceStatus? //e.g., "paid", "unpaid", "overdue"
  paymentMode   String? //e.g., "cash", "bank_transfer"
  dueDate       DateTime?
  total         Float?
  subtotal      Float?
  tax           Float?
  items         Radiator[]
  metadata      Json?

  Order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId String?

  clientId String?
  Client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt

  @@map("invoices")
}

model Price {
  id            String @id @default(cuid())
  unit          Float  @default(0)
  bulk          Float  @default(0)
  bulkThreshold Int    @default(0)

  Radiators Radiator[]

  @@map("prices")
}

model Radiator {
  id          String   @id @default(cuid())
  reference   String?  @unique
  category    String?
  dir         String?
  cooling     String?
  barcode     String?  @unique
  label       String?
  isActive    Boolean? @default(false)
  inventoryId String?
  priceId     String?
  directoryId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Inventory  Inventory?  @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  Price      Price?      @relation(fields: [priceId], references: [id], onDelete: SetNull)
  Directory  Directory?  @relation(fields: [directoryId], references: [id], onDelete: SetNull)
  Models     CarModel[]
  Components Component[]
  OrderItems OrderItem[]
  Invoice    Invoice?    @relation(fields: [invoiceId], references: [id])
  invoiceId  String?

  @@map("radiators")
}

enum ComponentType {
  COLLECTOR
  CORE
}

model Component {
  id         String        @id @default(cuid())
  name       String
  type       ComponentType
  radiatorId String

  Radiator       Radiator        @relation(fields: [radiatorId], references: [id], onDelete: Cascade)
  MaterialUsages MaterialUsage[]
  Metadata       Json?

  @@map("components")
}

// MATERIAL SYSTEM

model Material {
  id        String          @id @default(cuid())
  reference String?         @unique
  name      String
  unit      String // e.g., "grams", "pieces", "meters", "cmÂ²"
  Usages    MaterialUsage[]

  @@map("materials")
}

model MaterialUsage {
  id          String @id @default(cuid())
  componentId String
  materialId  String
  quantity    Float

  Component Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  Material  Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([componentId, materialId])
  @@map("material_usages")
}

// CAR SYSTEM

model Brand {
  id       String      @id @default(cuid())
  name     String
  Families CarFamily[]

  @@map("car_brands")
}

model CarFamily {
  id      String @id @default(cuid())
  name    String
  brandId String

  Brand  Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Models CarModel[]

  @@map("car_families")
}

model CarModel {
  id         String  @id @default(cuid())
  name       String
  production String?
  familyId   String
  radiatorId String?

  Family   CarFamily @relation(fields: [familyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Types    CarType[]
  Radiator Radiator? @relation(fields: [radiatorId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("car_models")
}

model CarType {
  id      String @id @default(cuid())
  name    String
  modelId String

  Model CarModel @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("car_type")
}

// CLIENTS & ORDERS

model Client {
  id                  String  @id @default(cuid())
  name                String
  phone               String  @unique
  label               String?
  email               String? @unique
  isCompany           Boolean @default(false)
  website             String?
  tradeRegisterNumber String?
  fiscalNumber        String?
  registrationArticle String?
  taxIdNumber         String?
  statisticalIdNumber String?
  approvalNumber      String?

  addressId String?  @unique
  Address   Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)

  Orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Invoice   Invoice[]

  @@map("clients")
}

model Attachment {
  id          String     @id @default(cuid())
  url         String // URL of the uploaded file
  type        String // MIME type like 'image/jpeg', 'application/pdf', etc.
  name        String // Original file name
  uniqueName  String     @unique // Unique file serial
  Order       Order?     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String?
  createdAt   DateTime   @default(now())
  OrderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId String? // Made optional to fix the issue @map("orderId")

  @@map("attachments") // Added map directive for consistency
}

model Order {
  id             String       @id @default(cuid())
  deadline       DateTime     @default(now())
  state          String?
  progress       Int          @default(0)
  OrdersItems    OrderItem[]
  itemsCount     Int          @default(0)
  deliveredItems Int          @default(0)
  Payment        Payment      @relation(name: "OrderToPayment", fields: [paymentId], references: [id], onDelete: Restrict)
  paymentId      String       @unique
  clientId       String
  Client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Attachments    Attachment[]

  createdAt DateTime  @default(now()) // Added for consistency
  updatedAt DateTime  @updatedAt // Added for consistency
  Invoice   Invoice[]

  @@map("order_batches") // Added map directive for consistency
}

model OrderItem {
  id           String       @id @default(cuid())
  note         Json?
  description  Json?
  modification Json?
  packaging    String?
  type         String?
  fabrication  String?
  isModified   Boolean?
  state        String? // e.g., "pending", "in_progress", "delivered"
  quantity     Int?
  validatedAt  DateTime?
  canceledAt   DateTime?
  createdAt    DateTime     @default(now()) // Made consistent (not optional)
  updatedAt    DateTime     @updatedAt // Made consistent (not optional)
  Radiator     Radiator     @relation(fields: [radiatorId], references: [id], onDelete: Restrict)
  radiatorId   String
  Order        Order?       @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId      String?
  Attachments  Attachment[]

  @@map("orders")
}

model Payment {
  id        String  @id @default(cuid())
  amount    Float
  deposit   Float
  remaining Float
  mode      String?
  bank      String?
  iban      String?
  depositor String?

  Order     Order?   @relation(name: "OrderToPayment")
  createdAt DateTime @default(now()) // Added for consistency
  updatedAt DateTime @updatedAt // Added for consistency

  @@map("payments")
}

// FILE SYSTEM

model Directory {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId String?
  Parent   Directory?  @relation("FolderParent", fields: [parentId], references: [id], onDelete: SetNull)
  Children Directory[] @relation("FolderParent")

  Files       File[]
  Permissions Permission[]

  Radiators Radiator[]
}

model File {
  id          String  @id @default(cuid())
  name        String
  mimeType    String
  url         String
  size        Int
  description String?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  directoryId String
  Directory   Directory @relation(fields: [directoryId], references: [id], onDelete: Cascade)

  Tags        Tag[]
  Versions    FileVersion[]
  Permissions Permission[]
}

model FileVersion {
  id        String   @id @default(cuid())
  version   Int
  url       String
  createdAt DateTime @default(now())

  fileId String
  File   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Files File[]
}

model Permission {
  id     String      @id @default(cuid())
  access AccessLevel
  userId String
  fileId String?
  dirId  String?

  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  File      File?      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  Directory Directory? @relation(fields: [dirId], references: [id], onDelete: Cascade)
}
